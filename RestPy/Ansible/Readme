
Description:
     Using Ansible to automation with the IxNetwork RESTPy Python client utility
     
Tested with:
    - Ansible version 2.7.6 and 2.8.1
    - Python 3.7.0
    - CentOS 7.5
    - ixnetwork_restpy version 1.0.33
    - Two Ixia ports connected back-to-back
    - IxNetwork version 8.50

Requirements:
    - Python 2.7 or Python >= 3.5
    - ixnetwork_restpy
    - Minimum IxNetwork version 8.50
    - https://github.com/ansible/ansible.git
 
Installation:
    This was tested using CentOS.  You could use other Linux distributions as well.

    Ansible installation options:
       - yum install ansible
       - pip install ansible

    git clone: https://github.com/ansible/ansible.git
    pip install -U --no-cache-dir ixnetwork_restpy

Post installation:

     Assuming that you already did a git clone for https://github.com/ansible/ansible.git.
     If you haven't, please do this because the ansible.cfg is configured to use the debug module.

     Edit ansible.cfg.

          - Look in the local directory as this Readme file.
          - Look for "callback_plugins" in the [default] section and set the path to where you cloned ansible.git
          - Look at the next section [ansible.cfg] for example.


ansible.cfg

    - This is Ansible's configuration file
    - The original is located at /etc/ansible.
    - A copy of the original ansible.cfg is copied and used in this current local RestPy directory.
    - This file could be located in various places and it is searched and executed in the following order:

         - Env variable: ANSIBLE_CONFIG
         - ~/.ansible.cfg (Home directory)
	 - ansible.cg (Working directory)  <-- This is what this sample is using
	 - /etc/ansible/ansible.cfg

     - The settings for OpenIxia:

          [default]
          log_path = ./ansible.log
          callback_plugins = /your_git_clone_path/ansible/lib/ansible/plugins/callback
          stdout_callback = debug


The Ansible model that this sample is using contains three components.

    1> Inventory (This is not applicable for Ixia, but it is needed for Ansible to work properly)
    2> Playbook  (Task execution. Equivalent to testsuites)
    3> Modules   (Python scripts)

    OpenIxia Ansible directory structure:

    /IxNetwork
       /RestPy

          /Ansible
             ansible.cfg
	     Readme

             /Inventory
	        ixia

             /Playbooks
	         bgpNgpf.yml

             /Modules
	         bgpNgpf.py


Inventory example:
    ixia:

      [IxNetRestApiServer]
      localhost

Playbook example below:
    - The 'name' on the top line describes this playbook
    - 'hosts' is the inventory.  IxNetRestApiServer is the group name to use.
    - Inside each Play, there is a list of tasks called "name" that describes the task.
    - Below the name is the Python module to be executed, which is the script.
    - All the parameter/value below bgpModule are fed into the bgpModule (the script).
    - You could create multiple playbooks calling the same bgpModule for different testbeds
      using different chassis and ports.
    - Playbooks are executed in sequential order, from top to bottom.

---
- name: BGP test
  hosts: IxNetRestApiServer

  tasks:
    - name: Configuring BGP NGPF
      bgpNgpf:
        apiServerIp: 192.168.70.3
        apiServerIpPort: 443
        forceTakePortOwnership: True
        ixChassisIp: 192.168.70.12
        portList: [['192.168.70.12', '1', '1'], ['192.168.70.12', '1', '2']]
        linuxUsername: admin
        linuxPassword: admin
        licenseServerIp: 192.168.70.3
        licenseMode: subscription
        licenseTier: tier3
 

Running Ansible:

    - Before you run Ansible, you should know that Ansible doesn't show real-time loggings.
    - You could enter: "tail -f restpy.log" in the Playbooks directory to see real time loggings.

    The parameters used for this example:

          -i: The inventory file to use.
          --module-path:  The Ansible module to use for pinging.
          -c:  The connection.  In this example, tell Ansible not to use SSH.
          -e ansible_python_interpreter = /usr/local/python3.6.3/bin/python3.6
          -v, vvv: debugging verbosity


    - Example 1: 
          ansible-playbook Playbooks/bgpNgpf.yml -i Inventory/ixia --module-path Modules -c local -e ansible_python_interpreter=/usr/local/python3.7.0/bin/python3.7 -v"

    - Example 2:  Run multiple playbooks 
          ansible-playbook Playbooks/playBgp.yml Playbooks/bgpNgpfLinux.yml -i Inventory/ixia --module-path Modules -c local -e ansible_python_interpreter=/usr/local/python3.7.0/bin/python3.7 -v"


Output:

   Using /home/hgee/OpenIxiaGit/IxNetwork/RestPy/Ansible/ansible.cfg as config file

   PLAY [BGP test] **************************************************************************

   TASK [Gathering Facts] *******************************************************************
   ok: [192.168.70.3]

   TASK [Configuring BGP NGPF] **************************************************************
   ok: [192.168.70.3] => {
       "changed": true,
       "test": "Passed"
   }

   PLAY RECAP *******************************************************************************
   192.168.70.3               : ok=2    changed=0    unreachable=0    failed=0 



To make Ansible display human readable debug:

    - Clone the ansible repository to your home directory: 
         git clone https://github.com/ansible/ansible.git
	 - In this example, I put it in my /home/hgee directory

    - Edit ansible.cfg in the local RestPy directory

    [defaults]
    log_path = ./ansible.log
    callback_plugins = callback_plugins = /home/hgee/ansible/lib/ansible/plugins/callback
    stdout_callback = debug


To add additional modules to the module search paths:

    - export ANSIBLE_LIBRARY=/path_to_modules:/path2_to_modules

